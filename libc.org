* Error Reporting

#+BEGIN_SRC C :includes <errno.h>
printf ("The initial value of errno is %d", errno);
#+END_SRC

#+RESULTS:
: The initial value of errno is 0

#+BEGIN_SRC C :includes <errno.h> <string.h> :results output
int errs[] = { EPERM, ENOENT, ESRCH, EINTR, EIO, ENXIO, E2BIG, ENOEXEC, EBADF, ENOMEM };
int size = sizeof errs / sizeof (int);

for (int i = 0; i < size; i++)
  puts (strerror (errs[i]));
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
Operation not permitted
No such file or directory
No such process
Interrupted system call
Input/output error
Device not configured
Argument list too long
Exec format error
Bad file descriptor
Cannot allocate memory
#+END_EXAMPLE

#+BEGIN_SRC C :includes <stdio.h> <errno.h> <string.h>
char *filename = "nonexist.txt";
FILE *file = fopen (filename, "r");
if (file == NULL)
  {
    fprintf (stdout,      /* Should be stderr, but org-babel doesn't allow it */
             "%s: Couldn't open file %s; %s\n",
             "libc.org",
             filename,
             strerror (errno));
  }
#+END_SRC

#+RESULTS:
: libc.org: Couldn't open file nonexist.txt; No such file or directory
* Memory

#+BEGIN_SRC C :cmdline (number-to-string (1+ (random 10)))
#include <stdlib.h>
#include <assert.h>
#include <time.h>

int
main (int argc, char *argv[])
{
  assert (argc > 1);
  int size = atoi (argv[1]);
  assert (size > 0);
  int *ptr = malloc (size * sizeof (int));
  if (NULL == ptr)
    {
      perror ("malloc");
      exit (EXIT_FAILURE);
    }
  srandom (time (0));
  for (int i = 0; i < size; i++)
    ptr[i] = random () % 10;
  for (int i = 0; i < size; i++)
    printf ("%d\n", ptr[i]);
  free (ptr);
  return 0;
}
#+END_SRC

#+RESULTS:
| 2 |
| 1 |
| 0 |
| 2 |
| 5 |
| 4 |

C99 variable-length arrays:

#+BEGIN_SRC C :tangle foo.c :cmdline (number-to-string (1+ (random 10)))
#include <stdlib.h>
#include <stdio.h>
#include <assert.h>

int
main (int argc, char *argv[])
{
  assert (argv[1] != NULL);
  int size = atoi (argv[1]);
  assert (size > 0);
  int ary[size];
  for (int i = 0; i < size; i++)
    ary[i] = random () % 10;
  for (int i = 0; i < size; i++)
    printf ("%d\n", ary[i]);
  return 0;
}
#+END_SRC

#+RESULTS:
| 3 |
| 6 |
| 7 |
| 5 |
| 3 |
| 5 |
* Character Handling

Classification of Characters:

- lower/upper case
- letter
- digit
- punctuation
- whitespaces
- blank
- graph
- print
- cntrl
- ascii

#+BEGIN_SRC C :includes <ctype.h> <assert.h> :results silent
assert (islower ('a'));
assert (isupper ('A'));
assert (isalpha ('a'));
assert (isdigit ('3'));
assert (isalnum ('a') && isalnum ('a'));
assert (isxdigit ('0') && isxdigit ('a'));
assert (ispunct (','));
char whitespaces[] = { ' ', '\f', '\n', '\r', '\t', '\v', 0 };
for (char *p = whitespaces; *p; p++)
  assert (isspace (*p));
assert (isblank (' ') && isblank ('\t'));
assert (isgraph ('a') && ! isgraph (' '));
assert (isprint ('a') && isprint (' '));
assert (iscntrl ('\t'));
#+END_SRC

Case Conversion:

#+BEGIN_SRC C :includes <ctype.h> <assert.h> :results silent
assert (tolower ('A') == 'a');
assert (toupper ('a') == 'A');
#+END_SRC
